-- CUSTOM COMMANDS + KEYMAPPINGS
	-- BASIC SETUP
vim.cmd("set tabstop=2")
vim.cmd("set shiftwidth=2")
vim.cmd("set rnu")
vim.cmd("set nu")
vim.o.signcolumn="yes"
vim.g.mapleader = " " 
vim.opt.guicursor = ""
vim.opt.mouse = ""


	-- KEYMAPS
vim.api.nvim_set_keymap('n', 'j', 'gj', {noremap = true, silent = true})
vim.api.nvim_set_keymap('n', 'k', 'gk', {noremap = true, silent = true})
vim.api.nvim_set_keymap('n', '<C-n>', ':Explore<CR>', {noremap = true, silent = true})
vim.keymap.set('x', '>', '>gv')
vim.keymap.set('x', '<', '<gv')

	-- DIAGNOSTIC
vim.keymap.set('n', '[d', vim.diagnostic.goto_prev, { desc = 'Go to previous diagnostic message' })
vim.keymap.set('n', ']d', vim.diagnostic.goto_next, { desc = 'Go to next diagnostic message' })
vim.keymap.set('n', '<leader>e', vim.diagnostic.open_float, { desc = 'Open floating diagnostic message' })
vim.keymap.set('n', '<leader>q', vim.diagnostic.setloclist, { desc = 'Open diagnostics list' })

-- LAZY
local lazypath = vim.fn.stdpath("data") .. "/lazy/lazy.nvim"
if not vim.loop.fs_stat(lazypath) then
  vim.fn.system({
    "git",
    "clone",
    "--filter=blob:none",
    "https://github.com/folke/lazy.nvim.git",
    "--branch=stable", -- latest stable release
    lazypath,
  })
end
vim.opt.rtp:prepend(lazypath)

local plugins = { 
	{ "bluz71/vim-nightfly-colors", name = "nightfly", lazy = false, priority = 1000 },
	{
		'nvim-telescope/telescope.nvim', tag = '0.1.5',
		dependencies = { 'nvim-lua/plenary.nvim' }
    },
	{"nvim-treesitter/nvim-treesitter", build = ":TSUpdate"},
	{
    -- LSP Configuration & Plugins
    'neovim/nvim-lspconfig',
		lazy = {false},
    dependencies = {
      -- Automatically install LSPs to stdpath for neovim
      'williamboman/mason.nvim',
      'williamboman/mason-lspconfig.nvim',

      -- Useful status updates for LSP
      -- NOTE: `opts = {}` is the same as calling `require('fidget').setup({})`
      { 'j-hui/fidget.nvim', opts = {} },

      -- Additional lua configuration, makes nvim stuff amazing!
      'folke/neodev.nvim',
    },
  },

  {
    -- Autocompletion
    'hrsh7th/nvim-cmp',
		lazy = {false},
    dependencies = {
      -- Snippet Engine & its associated nvim-cmp source
      'L3MON4D3/LuaSnip',
      'saadparwaiz1/cmp_luasnip',

      -- Adds LSP completion capabilities
      'hrsh7th/cmp-nvim-lsp',
      'hrsh7th/cmp-path',

      -- Adds a number of user-friendly snippets
      'rafamadriz/friendly-snippets',
    },
  },
	{
		"rust-lang/rust.vim",
		ft = "rust",
		init = function()
			vim.g.rustfmt_autosave = 1
		end
	},
	{
		'ThePrimeagen/harpoon',
	},
	{'simrat39/inlay-hints.nvim'},
	{'simrat39/rust-tools.nvim'},
	{
		'nvim-lualine/lualine.nvim',
		config = function()
		require("lualine").setup({
			options = {
				theme = 'dracula',
			}
		})
	end
	},
}
local opts = {}

require("lazy").setup(plugins, opts)
local builtin = require("telescope.builtin")

-- COLORSCHEME
vim.cmd [[colorscheme nightfly]]
 


 
-- TELESCOPE
vim.keymap.set("n", '<C-p>', builtin.find_files, {})
vim.keymap.set('n', '<leader>fg', builtin.live_grep, {})


-- TREESITTER
local treesitter_config = require("nvim-treesitter.configs")
treesitter_config.setup(
	{
		ensure_installed = {"lua", "python", "rust"},
		highlight = {enable = true},
		indent = {enable = true},
	}
)

-- MASON
local capabilities = require('cmp_nvim_lsp').default_capabilities()
require('mason').setup()
require("mason-lspconfig").setup {
    ensure_installed = { "lua_ls", "rust_analyzer" },
}

require("lspconfig").rust_analyzer.setup {
	settings = {
			capabilities = capabilities,
			opts = {
			inlay_hints = {enabled = true}
		},
			["rust-analyzer"] = {
					assist = {
							importMergeBehavior = "last",
							importPrefix = "by_self",
					},
					cargo = {
							loadOutDirsFromCheck = true
					},
					procMacro = {
							enable = true
					},
			},
	},
}


vim.g.rust_tools_inlay_hints = {
    all = true,
    typeHints = true,
    methodChainingHints = true,
    parameterHints = true,
}


local cmp = require('cmp')
local luasnip = require('luasnip')

-- Setup nvim-cmp
cmp.setup({
  snippet = {
    expand = function(args)
      luasnip.lsp_expand(args.body)
    end,
  },
  mapping = {
    ['<C-n>'] = cmp.mapping.select_next_item(),
    ['<C-p>'] = cmp.mapping.select_prev_item(),
    ['<CR>'] = cmp.mapping.confirm({ select = true }),
  },
  sources = {
    { name = 'nvim_lsp' },
    { name = 'luasnip' },
    { name = 'path' },
  },
})


local ih = require("inlay-hints")

require("rust-tools").setup({
  tools = {
    inlay_hints = {
      auto = true,
    },
  },
  server = {
    on_attach = function(c, b)
      ih.on_attach(c, b)
    end,
  },
})

-- Load Snippets


-- HARPOON
local mark = require("harpoon.mark")
local ui = require("harpoon.ui")


vim.keymap.set("n", "<leader>h", mark.add_file)
vim.keymap.set("n", "<C-e>", ui.toggle_quick_menu)


--vim.keymap.set("n", "<C-h>", function() ui.nav_file(1) end)
--vim.keymap.set("n", "<C-t>", function() ui.nav_file(2) end)
--vim.keymap.set("n", "<C-n>", function() ui.nav_file(3) end)
--vim.keymap.set("n", "<C-s>", function() ui.nav_file(4) end)





